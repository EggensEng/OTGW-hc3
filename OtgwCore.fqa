{"name":"OtgwCore","type":"com.fibaro.genericDevice","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"OtgwCore"},"sections":{"items":[{"components":[{"name":"labelConnectionStatus","style":{"weight":"1.2"},"text":"Connection: Disconnected","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"labelWaterPressureText","style":{"weight":"1.2"},"text":"Water pressure: 0.0 Bar","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"OtgwCore"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"RoomTemperature","type":"string","value":0.0},{"name":"TCP_IP","type":"string","value":"0.0.0.0"},{"name":"TCP_Port","type":"string","value":"0"},{"name":"devicesMap","type":"string","value":[0,0]},{"name":"RoomSetpoint","type":"string","value":0},{"name":"WaterPressureBar","type":"string","value":0.0},{"name":"PrevSetManualRoomSetpoint","type":"string","value":0}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"--\n-- QuickApp for the Fibaro HC3\n-- This QuickApp will take care of the OpenTherm Gateway product from: https://otgw.tclcode.com/\n-- QuickApp source: https://github.com/EggensEng/OTGW-hc3\n--\n\n-- Initialize the plugin\nfunction QuickApp:onInit()\n    self:debug(\"Starting OtgwCore\")\n\n    -- Init variables\n    self:updateView(\"labelWaterPressureText\", \"text\", \"Water pressure: \" .. self:getVariable(\"WaterPressureBar\") ..\"Bar\")\n    self:updateView(\"labelConnectionStatus\", \"text\", \"Connection: Disconnected\")\n\n    --Definitions of the index for devices\n    self.DevIndexTempSensor1 = 1\n    self.DevIndexThermostat1 = 2\n\n    --Initialize the device array\n    self.devicesMap={}\n    self.devicesMap = self:getVariable(\"devicesMap\")\n    self.devicesMap[0] = nil\n    self:setVariable(\"PrevSetManualRoomSetpoint\", 0.0)\n\n    -- Initialize the child devices\n    stat, ret = pcall(checkDevice, self.devicesMap[self.DevIndexTempSensor1], \"com.fibaro.temperatureSensor\" )\n    if stat == false or ret <= 0 then\n        self:createChild(\"RoomTemperatureDevice\", \"com.fibaro.temperatureSensor\", self.DevIndexTempSensor1)\n    end\n\n    stat, ret = pcall(checkDevice, self.devicesMap[self.DevIndexThermostat1], \"com.fibaro.hvacSystemAuto\" )\n    if stat == false or ret <= 0 then\n        self:createChild(\"RoomThermostatDevice\", \"com.fibaro.hvacSystemAuto\", self.DevIndexThermostat1)\n    end\n\n    -- Setup classes for child devices.\n    self:initChildDevices({\n        [\"com.fibaro.temperatureSensor\"] = OtgwDevice,\n        [\"com.fibaro.hvacSystemAuto\"] = OtgwDevice,\n    })\n\n    -- Print all child devices.\n    for id,device in pairs(self.childDevices) do\n        self:debug(\"Load child device: [\", id, \"]\", device.name, \", type of: \", device.type)\n    end\n\n    -- Initialize TCP socket\n    self.sock = net.TCPSocket()\n    self:connect()\nend\n\n-- Used in combination with pcal to check if a device exist\nfunction checkDevice(deviceId, deviceType)\n    if hub.getType(deviceId) ~= deviceType then\n        return 0\n    else\n        return 1\n    end\nend\n\n-- Handler for all data reveiced from the OpenTherm Gateway\nfunction QuickApp:handleOtgwData(data)\n    --Split received message\n    MsgSrc = data:sub(1,1)\n    MsgType = string.toint(data:sub(2,3))\n    MsgId = string.toint(data:sub(4,5))\n    MsgDat1 = string.toint(data:sub(6,7))\n    MsgDat2 = string.toint(data:sub(8,9))\n    FrameReadAck = (MsgType & 0x40)\n    FrameWriteDat = (MsgType & 0x10)\n    FrameWriteAck = (MsgType & 0x50)\n    \n    --Handle manual thermostat setpoint\n    prevManualSetpoint = self:getVariable(\"PrevSetManualRoomSetpoint\")\n    actualManualSetpoint = fibaro.getValue(self.devicesMap[self.DevIndexThermostat1], \"heatingThermostatSetpoint\")\n    if( prevManualSetpoint ~= 0.0 and actualManualSetpoint ~= prevManualSetpoint ) then\n        sendData = \"TC=\" .. tostring(actualManualSetpoint) .. \"0\\r\"\n        self:send(sendData)--Send command to thermostat for changing setpoint\n        self:setVariable(\"PrevSetManualRoomSetpoint\", actualManualSetpoint)\n    end\n\n    --Handle received messages\n    if MsgId == 24 and (FrameReadAck>0) then\n        -- Actual room temperature from thermostat\n        DataConvert = string.tofloat16(data:sub(6,9))\n        self:setVariable(\"RoomTemperature\", DataConvert)\n        fibaro.call(self.devicesMap[self.DevIndexTempSensor1], \"setTemp\", DataConvert)\n    elseif MsgId == 16 and (FrameReadAck>0) then\n        -- Actual setpoint on the thermostat\n        DataConvert = string.tofloat16(data:sub(6,9))\n        self:setVariable(\"RoomSetpoint\", DataConvert)\n        fibaro.call(self.devicesMap[self.DevIndexThermostat1], \"setHeatingThermostatSetpoint\", tostring(DataConvert))\n        self:setVariable(\"PrevSetManualRoomSetpoint\", DataConvert)\n    elseif MsgId == 18 and (FrameReadAck>0) then\n        -- Actual pressure of the water system\n        DataConvert = string.tofloat16(data:sub(6,9))\n        self:setVariable(\"WaterPressureBar\", DataConvert)\n        self:updateView(\"labelWaterPressureText\", \"text\", \"Water pressure: \" .. tostring(DataConvert) .. \" Bar\")\n    end\nend"},{"name":"OtgwDevice","isMain":false,"isOpen":true,"content":"--\n-- Class for OTGW device that will be used on creating new child deviced in use for the plugin\n--\n\n-- OpenthermGateway child device class\nclass 'OtgwDevice' (QuickAppChild)\n    function OtgwDevice:__init(device)\n        QuickAppChild.__init(self, device)\n    \n        -- setup default values for a thermostat\n        self:updateProperty(\"supportedThermostatModes\", {\"Heat\"})\n        self:updateProperty(\"thermostatMode\", \"Heat\")\n        self:updateProperty(\"heatingThermostatSetpoint\", 15)\n    end\n    \n    function OtgwDevice:setTemp(value)\n        self:updateProperty(\"value\", value)\n    end\n\n    -- handle action for mode change\n    function OtgwDevice:setThermostatMode(mode)\n        self:updateProperty(\"thermostatMode\", mode)\n    end\n\n    -- handle action for setting set point for heating\n    function OtgwDevice:setHeatingThermostatSetpoint(value) \n        self:updateProperty(\"heatingThermostatSetpoint\", value)\n    end"},{"name":"TCP","isMain":false,"isOpen":true,"content":"--\n-- All functions that are related to TCP/IP communication\n--\n\n-- Attempt a (re-)connection via TCP/IP\nfunction QuickApp:connect()\n    local ip = self:getVariable(\"TCP_IP\")\n    local port = tonumber(self:getVariable(\"TCP_Port\"))\n\n    -- Set a check variable for communication active\n    self.connectionActive = 1\n\n    self.sock:connect(ip, port, { -- connection to the device with the specified IP and port\n        success = function() -- the function will be triggered if the connection is correct\n            self:debug(\"connected\")\n            self:checkConnection()\n            self:waitForResponseFunction() -- launching a data readout \"loop\"\n        end,\n        error = function(err) -- a function that will be triggered in case of an incorrect connection, e.g. timeout\n            self:debug(\"connection error\")\n            fibaro.setTimeout(5000, function() self:connect() end) -- re-connection attempt (every 5s)\n        end,\n    })\nend\n\n-- Cyclic re-check if the connection is still active\nfunction QuickApp:checkConnection()\n    if self.connectionActive == 1 then\n        self.connectionActive = 0\n        --self:debug(\"connection active\")\n        self:updateView(\"labelConnectionStatus\", \"text\", \"Connection: Connected\")\n        fibaro.setTimeout(10000, function() self:checkConnection() end)\n    elseif self.connectionActive == 0 then\n        --self:debug(\"connection lost\")\n        self:updateView(\"labelConnectionStatus\", \"text\", \"Connection: Disconnected\")\n        self:connect()\n    end\nend\n\n-- Cyclic re-check if there is new data to receive\nfunction QuickApp:waitForResponseFunction()\n    self.sock:read({ -- reading a data package from the socket\n        success = function(data)\n            self.connectionActive = 1\n            self:onDataReceived(data) -- handling of received data\n            self:waitForResponseFunction() -- looping of data readout\n        end,\n        error = function() -- a function that will be called in case of an error when trying to receive data, e.g. disconnecting a socket\n            self:debug(\"response error at receiving\")\n            self.connectionActive = 0\n        end\n    })\nend\n\n-- Send new data on the communication socket if active\nfunction QuickApp:send(strToSend)\n    self.sock:write(strToSend, {\n        success = function() -- the function that will be triggered when the data is correctly sent\n            --self:debug(\"data sent:\", strToSend)\n        end,\n        error = function(err) -- the function that will be triggered in the event of an error in data transmission\n            self:debug(\"error while sending data\")\n        end\n    })\nend\n\n-- Called when new data is received\nfunction QuickApp:onDataReceived(data)\n    self:handleOtgwData(data)\nend"},{"name":"Child","isMain":false,"isOpen":true,"content":"--\n-- Child device creation functions\n--\n\n-- Create a new child device\nfunction QuickApp:createChild(name, type, uid, className)\n    local child = self:createChildDevice({\n        name = name,\n        type = type,\n    }, OtgwDevice)\n\n    self:trace(\"Child device created: \", child.id)\n\n    -- Store child device ID in device map\n    self.devicesMap[uid] = child.id\n    self:setVariable(\"devicesMap\", self.devicesMap)\nend"},{"name":"Conversions","isMain":false,"isOpen":true,"content":"--\n-- Collection of functions related to conversion of data\n--\n\n-- Convert 4 characters that is represented in HEX to a float\n-- Input: string\n-- Return: Float\nfunction string.tofloat16(hexBytesString)\n    local intH = string.toint(hexBytesString:sub(1,2))\n    local intL = string.toint(hexBytesString:sub(3,4))\n    return ((intH<<8) + intL) / 256.0\nend\n\n-- Convert 2 characters that is represented in HEX to an int\n-- Input: string\n-- Return: Int\nfunction string.toint(charHL)\n    local intH = string.tointSingle(charHL:sub(1,1))\n    local intL = string.tointSingle(charHL:sub(2,2))\n    return (intH << 4) + intL\nend\n\n-- Convert 1 character that is represented in HEX to an int\n-- Input: string\n-- Return: Int\nfunction string.tointSingle(char1)\n    if char1 == \"0\" then\n        return 0\n    end\n\n    local num = tonumber(char1)\n    if num == nil then\n    else\n        if num > 0 or num < 10 then\n            return num\n        end\n    end\n    \n    if char1 == \"A\" then\n        return 10\n    elseif char1 == \"B\" then\n        return 11\n    elseif char1 == \"C\" then\n        return 12\n    elseif char1 == \"D\" then\n        return 13\n    elseif char1 == \"E\" then\n        return 14\n    elseif char1 == \"F\" then\n        return 15\n    end\n\n    return 0\nend"}]}
